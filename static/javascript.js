// Generated by CoffeeScript 1.6.3
(function() {
  if (window.angular == null) {
    alert("There has been an error loading AngularJS.");
    return;
  }

  angular.module("RubyStream", ['ui.router', 'ui.bootstrap', 'RubyStream.Services', 'RubyStream.Directives', 'RubyStream.Controllers']).config([
    "$stateProvider", "$locationProvider", function($stateProvider, $locationProvider) {
      $stateProvider.state('viewing', {
        url: '/',
        templateUrl: '/view/viewing'
      }).state('viewing.user', {
        url: 'user/',
        abstract: true
      }).state('viewing.user.login', {
        url: 'login',
        onEnter: [
          "$stateParams", "$state", "$modal", "CurrentUser", function($stateParams, $state, $modal, CurrentUser) {
            return $modal.open({
              templateUrl: '/view/user_login',
              controller: [
                '$scope', function($scope) {
                  $scope.user = {
                    name: "",
                    password: ""
                  };
                  $scope.dismiss = function() {
                    return $scope.$dismiss();
                  };
                  return $scope.login = function() {
                    return CurrentUser.login($scope.user).then(function() {
                      return $scope.dismiss();
                    }, function(error) {
                      return $scope.error = error;
                    });
                  };
                }
              ],
              keyboard: true
            }).result["finally"](function(result) {
              return $state.transitionTo('viewing');
            });
          }
        ]
      }).state('viewing.playlist', {
        url: 'playlist/',
        templateUrl: '/view/playlist_layout',
        abstract: true
      }).state('viewing.playlist.index', {
        url: '',
        templateUrl: '/view/playlist_index',
        controller: 'PlaylistIndex'
      }).state('viewing.playlist.new', {
        url: 'new/',
        templateUrl: '/view/playlist_new',
        controller: 'PlaylistNew'
      }).state('viewing.playlist.view', {
        url: ':id',
        templateUrl: '/view/playlist_view',
        controller: 'PlaylistView'
      });
      return $locationProvider.html5Mode(true);
    }
  ]).run([
    "CurrentUser", "$rootScope", function(cu, $rootScope) {
      $rootScope.currentUser = cu;
      return cu.autoLogin();
    }
  ]).filter('time', function() {
    return function(input) {
      input = parseInt(input, 10);
      return "" + (Math.floor(input / 60)) + " Minutes " + (input % 60) + " Seconds";
    };
  });

  angular.module("RubyStream.Services", []).factory("CurrentUser", [
    "$http", "$q", function($http, $q) {
      var user;
      user = {};
      user.loggedIn = function() {
        return user.data != null;
      };
      user.login = function(data) {
        var deferred;
        deferred = $q.defer();
        $http.post('/api/user/login', data).success(function(data) {
          if (data.error) {
            return deferred.reject(data.error);
          } else {
            user.data = data;
            localStorage['user_id'] = data.id;
            localStorage['user_authkey'] = data.login_hash;
            return deferred.resolve();
          }
        });
        return deferred.promise;
      };
      user.autoLogin = function() {
        if (localStorage['user_id']) {
          return $http.post('/api/user/auth', {
            'user_id': localStorage['user_id'],
            'user_authkey': localStorage['user_authkey']
          }).success(function(data) {
            if (data) {
              user.data = data;
              localStorage['user_id'] = data.id;
              return localStorage['user_authkey'] = data.login_hash;
            }
          });
        }
      };
      user.isAdmin = function() {
        return user.loggedIn() && user.data.is_admin;
      };
      user.isModerator = function() {
        return user.loggedIn() && user.data.is_moderator;
      };
      user.post = function(url, data) {
        if (!user.loggedIn()) {
          return;
        }
        data.user_id = user.data.id;
        data.user_authkey = user.data.login_hash;
        return $http.post(url, data).error(function(data, status) {
          if (status === 400) {
            return user.data = {};
          }
        });
      };
      return user;
    }
  ]);

  angular.module("RubyStream.Directives", []).directive("navbarUserStatus", [
    "CurrentUser", function(CurrentUser) {
      return {
        templateUrl: "/view/navbarUserStatus",
        link: function(scope, element, attr) {}
      };
    }
  ]).directive("overlay", [
    "$state", function($state) {
      return {
        restrict: 'C',
        link: function(scope, element) {
          console.log(arguments);
          element.bind('click', function(e) {
            if (e.toElement === element[0]) {
              return $state.transitionTo('viewing');
            }
          });
        }
      };
    }
  ]);

  angular.module('RubyStream.Controllers', ['RubyStream.Services']).controller('PlaylistIndex', [
    "$scope", "$http", function($scope, $http) {
      return $http.get('/api/playlists').success(function(data) {
        return $scope.lists = data;
      });
    }
  ]).controller('PlaylistNew', [
    "$scope", "$http", "CurrentUser", "$state", function($scope, $http, CurrentUser, $state) {
      $scope.playlist = {
        name: ""
      };
      return $scope.createPlaylist = function() {
        return CurrentUser.post('/api/playlist/new', $scope.playlist).success(function(pl) {
          return $state.go('viewing.playlist.view', {
            id: pl.id
          });
        });
      };
    }
  ]).controller('PlaylistView', [
    "$scope", "$http", "$stateParams", "CurrentUser", function($scope, $http, $stateParams, CurrentUser) {
      $scope.playlist = {
        name: ""
      };
      $scope.addVideo = function() {
        CurrentUser.post('/api/playlist/' + $stateParams.id + '/add', $scope.video);
        return $scope.video = "";
      };
      return $http.get('/api/playlist/' + $stateParams.id).success(function(playlist) {
        return $scope.playlist = playlist;
      });
    }
  ]);

}).call(this);
